let canvas_size = 800;

function setup() {
  createCanvas(canvas_size, canvas_size);
  frameRate(8);

  w = width + 16;
  dx = (TWO_PI / period) * xspacing;
  yvalues = new Array(floor(w / xspacing));
  recurseImage = loadImage(
    "https://upload.wikimedia.org/wikipedia/commons/5/5a/Recurse_Center.png"
  );
}

let tilt = -0.5;
let direction = "right";

function draw() {
  background(220);
  fill("brown");
  arc(
    canvas_size / 2,
    canvas_size / 2,
    canvas_size / 3,
    canvas_size / 4,
    tilt,
    PI + QUARTER_PI + tilt,
    CHORD
  );
  if (direction == "right") {
    tilt += 0.1;
  }
  if (tilt > -0.1) {
    direction = "left";
  }
  if (direction == "left") {
    tilt -= 0.1;
  }
  if (tilt < -0.5) {
    direction = "right";
  }
  calcWave_1();
  renderWave_1();
  calcWave_2();
  renderWave_2();
  fill("black");
  rect(canvas_size / 2, canvas_size / 3, 10, 100);
  fill("yellow");
  quad(
    canvas_size / 2 + 75,
    canvas_size / 2 - 75,
    canvas_size / 2 + 75,
    canvas_size / 2.75 - 75,
    canvas_size / 3 + 75,
    canvas_size / 3 - 75,
    canvas_size / 3 + 75,
    canvas_size / 2 - 75
  );

  image(
    recurseImage,
    canvas_size / 2 - 7,
    canvas_size / 3 - 20,
    recurseImage.width / 4,
    recurseImage.height / 4
  );
}

let xspacing = 5; // Distance between each horizontal location
let w; // Width of entire wave
let theta = 0.0; // Start angle at 0
let amplitude = 30.0; // Height of wave
let period = 500.0; // How many pixels before the wave repeats
let dx; // Value for incrementing x
let yvalues; // Using an array to store height values for the wave

function calcWave_1() {
  // Increment theta (try different values for
  // 'angular velocity' here)
  theta += 0.1;

  // For every x value, calculate a y value with sine function
  let x = theta;
  for (let i = 0; i < yvalues.length; i++) {
    yvalues[i] = sin(x) * amplitude;
    x += dx;
  }
}

function renderWave_1() {
  noStroke();
  fill(255);
  // A simple way to draw the wave with an ellipse at each location
  for (let x = 0; x < yvalues.length; x++) {
    fill("lightblue");
    ellipse(x * xspacing, height / 1.12 + yvalues[x], 100, 500);
  }
}

function calcWave_2() {
  // Increment theta (try different values for
  // 'angular velocity' here)
  theta += 0.1;

  // For every x value, calculate a y value with sine function
  let x = theta;
  for (let i = 0; i < yvalues.length; i++) {
    yvalues[i] = sin(x) * amplitude * 2;
    x += dx;
  }
}

function renderWave_2() {
  noStroke();
  fill(255);
  // A simple way to draw the wave with an ellipse at each location
  for (let x = 0; x < yvalues.length; x++) {
    fill("blue");
    ellipse(x * xspacing, height / 1.1 + yvalues[x], 100, 500);
  }
}
